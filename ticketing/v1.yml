openapi: 3.0.1
externalDocs:
    description: Official documentation
    url: https://docs.legiti.com/
info:
  title: Legiti Ticketing API
  description: >-
    Legiti protects your company from losses due to fraud and
    chargebacks, maximizing revenue from valid purchases and minimizing
    unnecessary customer friction. We accomplish this by making predictions
    based on past and present customer behavior to evaluate the likelihood
    that an order is fraudulent.
  version: "1.0"
  license:
    name: MIT
  contact:
    name: Legiti Dev Team
    url: http://www.docs.legiti.com
    email: publishing@legiti.com
servers:
  - url: "https://legiti-api.lgtcdn.net"
paths:
  /ticketing/v1/evaluation:
    post:
      description: Send requests to this endpoint whenever you have an order that you would like to get evaluated by Legiti.
      tags:
        - evaluation
      operationId: ticketing_evaluation
      requestBody:
        content:
          application/json:
            schema:
              title: body_ticketing_evaluation
              type: object
              required:
                - order_id
                - user_id
                - total_paid_value
                - order_datetime
                - event_ids
                - payments
              properties:
                order_id:
                  type: string
                  description: The order's unique identifier within your platform
                user_id:
                  type: string
                  description: Your unique identifier for this user in your platform
                total_paid_value:
                  type: number
                  format: float
                  description: The exact amount that the user paid
                order_datetime:
                  type: string
                  format: date-time
                  description: The order's date and time of sale in UTC following the ISO 8601 format (YYYY-MM-DDTHH:mm:ssZ)
                event_ids:
                  type: array
                  items:
                    type: string
                  description: Your platform's unique identifier for the event associated with the order
                payments:
                  type: array
                  description: the payments used in this purchase
                  items:
                    $ref: "../base/v1/entities.yml#/components/schema/EvaluationPaymentEntity"
            examples:
              eval_ticketing_order:
                value: |-
                  {
                    "order_id": "12345",
                    "user_id": "98745",
                    "total_paid_value": 110.0,
                    "order_datetime": "2020-02-11T20:18:40Z",
                    "event_ids": ["1242"],
                    "payments": [{
                      "document_type": "cpf",
                      "document": "12345678911",
                      "credit_card": {
                        "first_six_digits": "123456",
                        "last_four_digits": "1234"
                      }
                    }]
                  }
      responses:
          '200':
            $ref: "../base/v1/responses.yml#/components/schemas/Evaluation200Response"
          '400':
            $ref: "../base/v1/responses.yml#/components/schemas/400Response"
          '401':
            $ref: "../base/v1/responses.yml#/components/schemas/401Response"
          '403':
            description: Unauthorized
            content:
              application/json:
                schema:
                  title: response_evaluation_unauthorized
                  oneOf:
                  - type: object
                    title: response_forbidden
                    description: Valid API key not authorized to access /evaluation resource
                    required:
                      - error_message
                      - error_code
                    properties:
                      error_message:
                        type: string
                      error_code:
                        type: number
                  - $ref: "../base/v1/responses.yml#/components/schemas/ErrorResponseNotAuthorized"
          '503':
            $ref: "../base/v1/responses.yml#/components/schemas/503Response"
  /ticketing/v1/event:
    post:
      description: Notify Legiti any time a new event is created.
      tags:
        - event
      operationId: event_post
      requestBody:
        content:
          application/json:
            schema:
              title: body_event_post
              oneOf:
                - $ref: "#/components/schemas/virtual_event"
                - $ref: "#/components/schemas/physical_event"
            examples:
              physical_event:
                value: |- 
                  {
                    "id": "123",
                    "title": "Event A",
                    "description": "Cool event A",
                    "organizers": ["12348524", "12345672"],
                    "categories": ["2", "3"],
                    "is_virtual": false,
                    "event_start_datetime": "2020-02-11T20:18:40Z",
                    "event_last_datetime": "2020-02-13T20:18:40Z",
                    "venue": {
                      "street_name":   "Rua Novarua",
                      "street_number": "253",
                      "zip_code":      "05432-010",
                      "city":          "São Paulo",
                      "state":         "SP",
                      "country":       "BR"
                    }
                  }
              virtual_event:
                value: |-
                  {
                    "id": "123",
                    "title": "Event A",
                    "description": "Cool event A",
                    "organizers": ["12348524", "12345672"],
                    "categories": ["2", "3"],
                    "is_virtual": false,
                    "event_start_datetime": "2020-02-11T20:18:40Z",
                    "event_last_datetime": "2020-02-13T20:18:40Z",
                    "venue": {
                      "street_name":   "Rua Novarua",
                      "street_number": "253",
                      "zip_code":      "05432-010",
                      "city":          "São Paulo",
                      "state":         "SP",
                      "country":       "BR"
                    }
                  }
      responses:
        '200':
          $ref: "../base/v1/responses.yml#/components/schemas/Collection20xResponse"
        '201':
          $ref: "../base/v1/responses.yml#/components/schemas/Collection20xResponse"
        '400':
          $ref: "../base/v1/responses.yml#/components/schemas/400Response"
        '401':
          $ref: "../base/v1/responses.yml#/components/schemas/401Response"
        '403':
          $ref: "../base/v1/responses.yml#/components/schemas/403Response"
        '503':
          $ref: "../base/v1/responses.yml#/components/schemas/503Response"
    put:
      description: Send information to Legiti any time an event's information (description, venue, start/end time, etc...) is altered.
      tags:
        - event
      operationId: event_put
      requestBody:
        content:
          application/json:
            schema:
              title: body_event_put
              oneOf:
                - $ref: "#/components/schemas/virtual_event"
                - $ref: "#/components/schemas/physical_event"
            examples:
              change_event_times:
                value: |-
                  {
                    "id": "123",
                    "event_start_datetime": "2020-02-15T20:18:40Z",
                    "event_last_datetime": "2020-02-18T20:18:40Z"
                  }
      responses:
        '200':
          $ref: "../base/v1/responses.yml#/components/schemas/Collection20xResponse"
        '400':
          $ref: "../base/v1/responses.yml#/components/schemas/400Response"
        '401':
          $ref: "../base/v1/responses.yml#/components/schemas/401Response"
        '403':
          $ref: "../base/v1/responses.yml#/components/schemas/403Response"
        '503':
          $ref: "../base/v1/responses.yml#/components/schemas/503Response"
  /ticketing/v1/order:
    post:
      summary: Notify Legiti any time a new order is created
      description: >-
        You can send order-related information to Legiti via the /order endpoint
      tags:
        - order
      operationId: order_post
      requestBody:
        content:
          application/json:
            schema:
              title: body_order_post
              type: object
              required:
                - id
                - user_id
                - total_paid_value
                - status
                - tickets
                - payments
              properties:
                id:
                  type: string
                  description: The order's unique identifier within your platform
                user_id:
                  type: string
                  description: The buyer's id
                total_paid_value:
                  type: number
                  format: float
                  minimum: 0
                  description: The exact amount that the user paid
                total_gross_value:
                  type: number
                  format: float
                  minimum: 0
                  description: The sum of all the order items value
                discount_value:
                  type: number
                  format: float
                  minimum: 0
                  description: The discount value applied to the order
                coupon_names:
                  type: array
                  description: >-
                   The name of the coupons that were applied. Note:
                   if coupon_names is provided, discount_value is also required
                  items:
                    type: string
                currency:
                  type: string
                  maxLength: 3
                  minLength: 3
                  description: The currency of the total_paid_value, as an ISO-4217 currency code
                status:
                  $ref: "../base/v1/enums.yml#/components/schemas/OrderStatus"
                tickets:
                  title: tickets
                  type: array
                  description: The purchased tickets
                  items:
                    type: object
                    required:
                      - id
                      - event_id
                      - unit_price
                      - valid_from
                      - valid_until
                    properties:
                      id:
                        type: string
                        description: Your platform's unique identifier for the ticket
                      unit_price:
                        type: number
                        format: float
                        description: The purchased ticket's unit price
                      discount:
                        type: number
                        format: float
                        description: The discount amount applied to this ticket
                      valid_from:
                        type: string
                        format: date-time
                        description: The time at which this ticket becomes valid for entry to the event
                      valid_until:
                        type: string
                        format: date-time
                        description: The time at which this ticket stops being valid for entry to the event
                      event_id:
                        type: string
                        description: The ID of the Event the ticket is associated with
                      guest:
                        title: guest
                        type: object
                        description: The guest with whom the ticket is associated
                        required:
                          - name
                        properties:
                          email:
                            type: string
                            description: The email of the user with whom the ticket is associated
                          name:
                            type: string
                            description: The name of the user with whom the ticket is associated
                          document_type:
                            $ref: "../base/v1/enums.yml#/components/schemas/DocumentType"
                          document:
                            type: string
                            description: The document number associated with the user
                payments:
                  title: order_payment
                  type: array
                  description: The payments used in this purchase
                  items:
                    oneOf:
                      - $ref: "../base/v1/entities.yml#/components/schemas/payment_credit_card"
                      - $ref: "../base/v1/entities.yml#/components/schemas/payment_boleto"
                      - $ref: "../base/v1/entities.yml#/components/schemas/payment_other"
            examples:
              create_ticketing_order:
                value: |-
                  {
                    "id": "12345",
                    "user_id": "98745",
                    "total_paid_value": 110.0,
                    "total_gross_value": 100.0,
                    "discount_value": 10.0,
                    "coupon_names": ["BCOOL"],
                    "currency": "BRL",
                    "status": "pending",
                    "tickets": [
                      {
                        "id": "15975368",
                        "unit_price": 30,
                        "discount": 0,
                        "valid_from": "2020-02-11T20:18:40Z",
                        "valid_until": "2020-02-12T20:18:40Z",
                        "event_id": "123",
                        "guest": {
                          "name": "Ana Maria Braga",
                          "email": "a_user@gmail.com",
                          "document_type": "cpf",
                          "document": "123421321312"
                        }
                      }
                    ],
                    "payments": [
                      {
                        "id": "974613",
                        "method": "credit_card",
                        "payment_value": 110.0,
                        "installments": 1,
                        "interest": 0.1,
                        "status": "approved",
                        "document_type": "cpf",
                        "document": "12345678911",
                        "credit_card": {
                          "first_six_digits": "123456",
                          "last_four_digits": "1234",
                          "expiration_date": "23/05",
                          "holder_name": "Random da Silva"
                        },
                        "billing_address": {
                          "street_name": "Rua Fidalga",
                          "street_number": "252",
                          "zip_code": "05432-010",
                          "city": "São Paulo",
                          "state": "SP",
                          "country": "BR"
                        }
                      }
                    ]
                  }
      responses:
        '200':
          $ref: "../base/v1/responses.yml#/components/schemas/Collection20xResponse"
        '201':
          $ref: "../base/v1/responses.yml#/components/schemas/Collection20xResponse"
        '400':
          $ref: "../base/v1/responses.yml#/components/schemas/400Response"
        '401':
          $ref: "../base/v1/responses.yml#/components/schemas/401Response"
        '403':
          $ref: "../base/v1/responses.yml#/components/schemas/403Response"
        '503':
          $ref: "../base/v1/responses.yml#/components/schemas/503Response"
    put:
      summary: Notify Legiti when an order's status is updated.
      description: Update order status
      tags:
        - order
      operationId: order_put
      requestBody:
        content:
          application/json:
            schema:
              $ref: "../base/v1/entities.yml#/components/schemas/body_order_put"
            examples:
              update_order_status:
                value: |-
                  {
                    "id": "12345",
                    "status": "approved"
                  }
      responses:
        '200':
          $ref: "../base/v1/responses.yml#/components/schemas/Collection20xResponse"
        '400':
          $ref: "../base/v1/responses.yml#/components/schemas/400Response"
        '401':
          $ref: "../base/v1/responses.yml#/components/schemas/401Response"
        '403':
          $ref: "../base/v1/responses.yml#/components/schemas/403Response"
        '503':
          $ref: "../base/v1/responses.yml#/components/schemas/503Response"
  /ticketing/v1/transfer:
    post:
      description: Notify Legiti any time a new transfer is created
      tags:
        - transfer
      operationId: transfer_post
      requestBody:
        content:
          application/json:
            schema:
              title: body_transfer_post
              type: object
              required:
                - id
                - title
                - organizers
                - is_virtual
                - event_start_datetime
                - event_last_datetime
              properties:
                id:
                  type: string
                  description: Your platform's unique ID for describing the transfer
                ticket_id:
                  type: string
                  description: Your platform's unique ID for the ticket being transferred
                sender_user_id:
                  type: string
                  description: The user_id of the User account initiating the transfer
                status:
                  type: string
                  enum:
                    - pending
                    - accepted
                    - cancelled
                    - rejected
                  description: >-
                    The status of the transfer (accepted values:
                    "pending" "accepted" "cancelled" "rejected")
                recipient:
                  $ref: "#/components/schemas/Recipient"
            examples:
              create_transfer:
                value: |-
                  {
                    "id": "2134",
                    "ticket_id": "15975368",
                    "sender_user_id": "1234",
                    "recipient": {
                      "id": "1111",
                      "type": "id"
                    },
                    "status": "pending"
                  }
      responses:
        '201':
          $ref: "../base/v1/responses.yml#/components/schemas/Collection20xResponse"
        '200':
          $ref: "../base/v1/responses.yml#/components/schemas/Collection20xResponse"
        '400':
          $ref: "../base/v1/responses.yml#/components/schemas/400Response"
        '401':
          $ref: "../base/v1/responses.yml#/components/schemas/401Response"
        '403':
          $ref: "../base/v1/responses.yml#/components/schemas/403Response"
        '503':
          $ref: "../base/v1/responses.yml#/components/schemas/503Response"
    put:
      description: Send information to Legiti any time a transfer's information (generally status) is altered.
      tags:
        - transfer
      operationId: transfer_put
      requestBody:
        content:
          application/json:
            schema:
              title: body_transfer_put
              type: object
              required:
                - id
              properties:
                id:
                  type: string
                  description: Your platform's unique ID for describing the transfer
                ticket_id:
                  type: string
                  description: Your platform's unique ID for the ticket being transferred
                sender_user_id:
                  type: string
                  description: The user_id of the User account initiating the transfer
                status:
                  type: string
                  enum:
                    - pending
                    - accepted
                    - cancelled
                    - rejected
                  description: >-
                    The status of the transfer (accepted values:
                    "pending" "accepted" "cancelled" "rejected")
                recipient:
                  $ref: "#/components/schemas/Recipient"
            examples:
              update_transfer:
                value: |- 
                  {
                    "id": "2134",
                    "status": "accepted"
                  }
      responses:
        '200':
          $ref: "../base/v1/responses.yml#/components/schemas/Collection20xResponse"
        '400':
          $ref: "../base/v1/responses.yml#/components/schemas/400Response"
        '401':
          $ref: "../base/v1/responses.yml#/components/schemas/401Response"
        '403':
          $ref: "../base/v1/responses.yml#/components/schemas/403Response"
        '503':
          $ref: "../base/v1/responses.yml#/components/schemas/503Response"
  /ticketing/v1/auth:
    $ref: "../base/v1/endpoints.yml#/components/schemas/Auth"
  /ticketing/v1/order/mark_fraudulent:
    $ref: "../base/v1/endpoints.yml#/components/schemas/OrderMarkedFraudulent"
  /ticketing/v1/order/payment:
    $ref: "../base/v1/endpoints.yml#/components/schemas/PaymentUpdate"
  /ticketing/v1/user:
    $ref: "../base/v1/endpoints.yml#/components/schemas/User"
  /ticketing/v1/password:
    $ref: "../base/v1/endpoints.yml#/components/schemas/Password"
components:
  schemas:
    virtual_event:
      title: virtual_event
      type: object
      required:
        - id
        - title
        - organizers
        - is_virtual
        - event_start_datetime
        - event_last_datetime
      properties:
        is_virtual:
          type: boolean
        organizers:
          type: array
          items:
            type: string
        description:
          type: string
        id:
          type: string
        categories:
          type: array
          items:
            type: string
        title:
          type: string
        event_start_datetime:
          type: string
          format: date-time
        event_last_datetime:
          type: string
          format: date-time
    physical_event:
      title: physical_event
      type: object
      required:
        - id
        - title
        - organizers
        - is_virtual
        - event_start_datetime
        - event_last_datetime
        - venue
      properties:
        is_virtual:
          type: boolean
        venue:
          $ref: "../base/v1/entities.yml#/components/schemas/Address"
        organizers:
          type: array
          items:
            type: string
        description:
          type: string
        id:
          type: string
        categories:
          type: array
          items:
            type: string
        title:
          type: string
        event_start_datetime:
          type: string
          format: date-time
        event_last_datetime:
          type: string
          format: date-time
    Recipient:
      type: object
      description: The recipient of the transferred ticket
      required:
        - type
        - id
      properties:
        type:
          type: string
          enum:
            - email
            - id
          description: >-
            The type of identifier that the ID field contains.
            Accepted values:"email"or "id" (where "id" corresponds
            to Your platform's user_id of the User account receiving
            the ticket in the transfer)
        id:
          type: string
          description: >-
            The identifier for the recipient. If "type" is "email",
            this should be an email address. Otherwise, it should be a user_id.
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
security:
  - bearerAuth: []